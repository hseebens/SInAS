source(file.path("R","GeteventDate.r")) # standardising location names
source(file.path("R","MergeDatabases.r")) # combine data sets
source(file.path("R","CheckGBIFTax.r")) #function to check taxon names using GBIF taxonomy
################################################################################
################################################################################
######## Load data set table ###################################################
FileInfo <- read.xlsx(file.path("Config","DatabaseInfo.xlsx"),sheet=1)
if (nrow(FileInfo)==0) stop("No database information provided. Add information to Config/DatabaseInfo.xlsx.")
## load databases, extract required information and harmonise taxon names...
cat("\n Step 1 Preparation of provided data sets \n")
PrepareDatasets(FileInfo)
## identify input datasets based on file name "StandardSpec_....csv"
allfiles <- list.files(file.path("Output","Intermediate"))
inputfiles_all <- allfiles[grep("Step1_StandardColumns_",allfiles)]
inputfiles <- vector()
for (i in 1:length(inputfiles_all)){
inputfiles <- c(inputfiles,grep(FileInfo[i,"Dataset_brief_name"],inputfiles_all,value=T))
}
inputfiles <- inputfiles[!is.na(inputfiles)]
## translation tables
translation_estabmeans <- read.xlsx(file.path("Config","Translation_establishmentMeans.xlsx"),sheet=1)
translation_occurrence <- read.xlsx(file.path("Config","Translation_occurrenceStatus.xlsx"),sheet=1)
translation_degrEstab <- read.xlsx(file.path("Config","Translation_degreeOfEstablishment.xlsx"),sheet=1)
translation_pathway <- read.xlsx(file.path("Config","Translation_pathway.xlsx"),sheet=1)
translation_habitat <- read.xlsx(file.path("Config","Translation_habitat.xlsx"),sheet=1)
inputfiles
i<-3
dat <- read.table(file.path("Output","Intermediate",inputfiles[i]),header=T,stringsAsFactors = F)
head(dat)
unresolved_estabmeans <- vector()
unresolved_occurrenceStatus <- vector()
unresolved_degreeOfEstablishment <- vector()
unresolved_pathway <- vector()
unresolved_habitat <- vector()
resolved_estabmeans <- vector()
resolved_occurrenceStatus <- vector()
resolved_degreeOfEstablishment <- vector()
resolved_pathway <- vector()
resolved_habitat <- vector()
if (any(colnames(dat)=="establishmentMeans")){
dat$establishmentMeans <- gsub("^\\s+|\\s+$", "",dat$establishmentMeans) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$establishmentMeans,translation_estabmeans$origTerm) # identify matches
unresolved_estabmeans <- unique(dat$establishmentMeans[is.na(ind)]) # store mis-matches
resolved_estabmeans <- unique(dat$establishmentMeans[!is.na(ind)]) # store mis-matches
translated <- translation_estabmeans$newTerm[ind]
indNA <- is.na(translated)
dat$establishmentMeans[!indNA] <- translated[!indNA]  # replace strings
# identify matches of Darwin Core
ind <- match(dat$establishmentMeans,translation_estabmeans$newTerm) # identify matches with Darwin Core
dat$establishmentMeans <- translation_estabmeans$newTerm[ind] # replace strings
dat$establishmentMeans[is.na(ind)] <- "" # indicate mis-matches
}
## Darwin Core: occurrenceStatus
if (any(colnames(dat)=="occurrenceStatus")){
dat$occurrenceStatus <- gsub("^\\s+|\\s+$", "",dat$occurrenceStatus) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$occurrenceStatus,translation_occurrence$origTerm) # identify matches
unresolved_occurrenceStatus <- unique(dat$occurrenceStatus[is.na(ind)]) # store mis-matches
resolved_occurrenceStatus <- unique(dat$occurrenceStatus[!is.na(ind)]) # store mis-matches
translated <- translation_occurrence$newTerm[ind]
indNA <- is.na(translated)
dat$occurrenceStatus[!indNA] <- translated[!indNA]  # replace strings
# identify matches of Darwin Core
dat$occurrenceStatus[dat$occurrenceStatus!="absent"] <- "present" # Assumption (!) that all species are present if not listed otherwise
}
## Darwin Core: degreeOfEstablishment (not officially accepted by Darwin Core)
if (any(colnames(dat)=="degreeOfEstablishment")){
dat$degreeOfEstablishment <- gsub("^\\s+|\\s+$", "",dat$degreeOfEstablishment) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$degreeOfEstablishment,translation_degrEstab$origTerm) # identify matches of translated terms
unresolved_degreeOfEstablishment <- unique(dat$degreeOfEstablishment[is.na(ind)]) # store mis-matches
resolved_degreeOfEstablishment <- unique(dat$degreeOfEstablishment[!is.na(ind)]) # store mis-matches
translated <- translation_degrEstab$newTerm[ind]
indNA <- is.na(translated)
dat$degreeOfEstablishment[!indNA] <- translated[!indNA]  # replace strings
# identify matches of Darwin Core
ind <- match(dat$degreeOfEstablishment,translation_degrEstab$newTerm) # identify matches with Darwin Core
dat$degreeOfEstablishment <- translation_degrEstab$newTerm[ind] # replace strings
dat$degreeOfEstablishment[is.na(ind)] <- "" # indicate mis-matches
}
## Darwin Core: pathway
if (any(colnames(dat)=="pathway")){
dat$pathway <- gsub("^\\s+|\\s+$", "",dat$pathway) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$pathway,translation_pathway$origTerm) # identify matches of translated terms
unresolved_pathway <- unique(dat$pathway[is.na(ind)]) # store mis-matches
resolved_pathway <- unique(dat$pathway[!is.na(ind)]) # store mis-matches
translated <- translation_pathway$newTerm[ind]
indNA <- is.na(translated)
dat$pathway[!indNA] <- translated[!indNA]  # replace strings
# identify matches of Darwin Core
ind <- match(dat$pathway,translation_pathway$newTerm) # identify matches with Darwin Core
dat$pathway <- translation_pathway$newTerm[ind] # replace strings
dat$pathway[is.na(ind)] <- "" # indicate mis-matches
}
any(colnames(dat)=="habitat")
dat$habitat <- gsub("^\\s+|\\s+$", "",dat$habitat) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$habitat,translation_pathway$origTerm) # identify matches of translated terms
ind
table(ind)
unresolved_habitat <- unique(dat$habitat[is.na(ind)]) # store mis-matches
unresolved_habitat
translation_pathway$origTerm
translation_habitat$origTerm
# identify matches of alternative terms...
ind <- match(dat$habitat,translation_habitat$origTerm) # identify matches of translated terms
ind
# identify matches of alternative terms...
ind <- match(dat$habitat,tolower(translation_habitat$origTerm)) # identify matches of translated terms
ind
dat$degreeOfEstablishment
unresolved_estabmeans <- vector()
unresolved_occurrenceStatus <- vector()
unresolved_degreeOfEstablishment <- vector()
unresolved_pathway <- vector()
unresolved_habitat <- vector()
resolved_estabmeans <- vector()
resolved_occurrenceStatus <- vector()
resolved_degreeOfEstablishment <- vector()
resolved_pathway <- vector()
resolved_habitat <- vector()
## Darwin Core: establishmentMeans
if (any(colnames(dat)=="establishmentMeans")){
dat$establishmentMeans <- gsub("^\\s+|\\s+$", "",dat$establishmentMeans) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$establishmentMeans,tolower(translation_estabmeans$origTerm)) # identify matches
unresolved_estabmeans <- unique(dat$establishmentMeans[is.na(ind)]) # store mis-matches
resolved_estabmeans <- unique(dat$establishmentMeans[!is.na(ind)]) # store mis-matches
translated <- translation_estabmeans$newTerm[ind]
indNA <- is.na(translated)
dat$establishmentMeans[!indNA] <- translated[!indNA]  # replace strings
# identify matches of Darwin Core
ind <- match(dat$establishmentMeans,tolower(translation_estabmeans$newTerm)) # identify matches with Darwin Core
dat$establishmentMeans <- translation_estabmeans$newTerm[ind] # replace strings
dat$establishmentMeans[is.na(ind)] <- "" # indicate mis-matches
}
## Darwin Core: occurrenceStatus
if (any(colnames(dat)=="occurrenceStatus")){
dat$occurrenceStatus <- gsub("^\\s+|\\s+$", "",dat$occurrenceStatus) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$occurrenceStatus,tolower(translation_occurrence$origTerm)) # identify matches
unresolved_occurrenceStatus <- unique(dat$occurrenceStatus[is.na(ind)]) # store mis-matches
resolved_occurrenceStatus <- unique(dat$occurrenceStatus[!is.na(ind)]) # store mis-matches
translated <- translation_occurrence$newTerm[ind]
indNA <- is.na(translated)
dat$occurrenceStatus[!indNA] <- translated[!indNA]  # replace strings
# identify matches of Darwin Core
dat$occurrenceStatus[dat$occurrenceStatus!="absent"] <- "present" # Assumption (!) that all species are present if not listed otherwise
}
## Darwin Core: degreeOfEstablishment (not officially accepted by Darwin Core)
if (any(colnames(dat)=="degreeOfEstablishment")){
dat$degreeOfEstablishment <- gsub("^\\s+|\\s+$", "",dat$degreeOfEstablishment) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$degreeOfEstablishment,tolower(translation_degrEstab$origTerm)) # identify matches of translated terms
unresolved_degreeOfEstablishment <- unique(dat$degreeOfEstablishment[is.na(ind)]) # store mis-matches
resolved_degreeOfEstablishment <- unique(dat$degreeOfEstablishment[!is.na(ind)]) # store mis-matches
translated <- translation_degrEstab$newTerm[ind]
indNA <- is.na(translated)
dat$degreeOfEstablishment[!indNA] <- translated[!indNA]  # replace strings
# identify matches of Darwin Core
ind <- match(dat$degreeOfEstablishment,tolower(translation_degrEstab$newTerm)) # identify matches with Darwin Core
dat$degreeOfEstablishment <- translation_degrEstab$newTerm[ind] # replace strings
dat$degreeOfEstablishment[is.na(ind)] <- "" # indicate mis-matches
}
## Darwin Core: pathway
if (any(colnames(dat)=="pathway")){
dat$pathway <- gsub("^\\s+|\\s+$", "",dat$pathway) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$pathway,tolower(translation_pathway$origTerm)) # identify matches of translated terms
unresolved_pathway <- unique(dat$pathway[is.na(ind)]) # store mis-matches
resolved_pathway <- unique(dat$pathway[!is.na(ind)]) # store mis-matches
translated <- translation_pathway$newTerm[ind]
indNA <- is.na(translated)
dat$pathway[!indNA] <- translated[!indNA]  # replace strings
# identify matches of Darwin Core
ind <- match(dat$pathway,tolower(translation_pathway$newTerm)) # identify matches with Darwin Core
dat$pathway <- translation_pathway$newTerm[ind] # replace strings
dat$pathway[is.na(ind)] <- "" # indicate mis-matches
}
any(colnames(dat)=="habitat")
dat$habitat <- gsub("^\\s+|\\s+$", "",dat$habitat) # trim leading and trailing whitespace
# identify matches of alternative terms...
ind <- match(dat$habitat,tolower(translation_habitat$origTerm)) # identify matches of translated terms
ind
table(ind)
ind <- match(dat$habitat,tolower(translation_habitat$origTerm)) # identify matches of translated terms
unresolved_habitat <- unique(dat$habitat[is.na(ind)]) # store mis-matches
unresolved_habitat
resolved_habitat <- unique(dat$habitat[!is.na(ind)]) # store mis-matches
resolved_habitat
translated <- translation_habitat$newTerm[ind]
indNA <- is.na(translated)
dat$habitat[!indNA] <- translated[!indNA]  # replace strings
translated[!indNA]
ind <- match(dat$habitat,tolower(translation_habitat$newTerm))
ind
ind <- match(dat$habitat,tolower(translation_habitat$newTerm)) # identify matches with Darwin Core
dat$habitat <- translation_habitat$newTerm[ind] # replace strings
dat$habitat[is.na(ind)] <- "" # indicate mis-matches
dat$habitat
unresolved_habitat
resolved_habitat
dat <- read.table("Output/AlienSpecies_MultipleDBs_Masterfile_vs2.3.csv")
str(dat)
dat <- read.table("Output/AlienSpecies_MultipleDBs_Masterfile_vs2.3.csv",stringsAsFactors = F)
str(dat)
dat <- read.table("Output/AlienSpecies_MultipleDBs_Masterfile_vs2.3.csv",stringsAsFactors = F,header=T)
str(dat)
length(unique(dat$scientificName))
length(unique(dat$Location))
length(grep("GRIIS",dat$origDB))
length(grep("GloNAF",dat$origDB))
length(grep("AmphRep",dat$origDB))
length(grep("GAVIA",dat$origDB))
length(grep("FirstRecords",dat$origDB))
length(unique(subset(dat,grepl("GAVIA",dat$origDB))$Taxon))
length(unique(subset(dat,grepl("AmphRep",dat$origDB))$Taxon))
length(unique(subset(dat,grepl("GRIIS",dat$origDB))$Taxon))
length(unique(subset(dat,grepl("GloNAF",dat$origDB))$Taxon))
length(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon))
graphics.off()
rm(list=ls())
## required libraries
library(rgbif) # for checking names, records and taxonomy; note: usage of rgbif may cause warnings like "Unknown or uninitalised column: " which is a bug. Can be ignored.
library(openxlsx)
library(data.table)
## option for storing the intermediate and final output
outputfilename <- "AlienSpecies_MultipleDBs_Masterfile_vs" # name of final output file
version <- "2.3" # which version of the database are you going to produce? this will be attached to the end of 'outputfilename'
output <- T # shall intermediate results be stored to disk? (may overwrite existing files!)
################################################################################
### load functions #######################################################
source(file.path("R","PrepareDatasets.r")) # preparing example data sets as input files
source(file.path("R","StandardiseTaxonNames.r")) # standardising taxon names, requires GBIF connection, takes some time...
source(file.path("R","OverwriteTaxonNames.r")) # replace taxon names with user-defined ones
source(file.path("R","StandardiseLocationNames.r")) # standardising location names
source(file.path("R","StandardiseTerms.r")) # standardising location names
source(file.path("R","GeteventDate.r")) # standardising location names
source(file.path("R","MergeDatabases.r")) # combine data sets
source(file.path("R","CheckGBIFTax.r")) #function to check taxon names using GBIF taxonomy
################################################################################
################################################################################
######## Load data set table ###################################################
FileInfo <- read.xlsx(file.path("Config","DatabaseInfo.xlsx"),sheet=1)
if (nrow(FileInfo)==0) stop("No database information provided. Add information to Config/DatabaseInfo.xlsx.")
FileInfo
i<-4
data_name <- FileInfo[i,"File_name_to_load"]
dat <- read.xlsx(file.path("Inputfiles",data_name),sheet=1)
colnames(dat)
length(unique(dat$region_id))
range(dat$region_id)
dat <- read.table("Output/AlienSpecies_MultipleDBs_Masterfile_vs2.3.csv",stringsAsFactors = F)
dim(dat)
dat <- read.table("Output/AlienSpecies_MultipleDBs_Masterfile_vs2.3.csv",stringsAsFactors = F,header=T)
length(unique(dat$Taxon))
length(unique(dat$scientificName))
length(unique(subset(dat,grep("GRIIS",dat$origDB))$Taxa))
length(unique(subset(dat,grepl("GRIIS",dat$origDB))$Taxa))
grepl("GRIIS",dat$origDB)
length(unique(subset(dat,grepl("GRIIS",dat$origDB)$Taxa)))
length(unique(subset(dat,grepl("GRIIS",dat$origDB))$Taxon))
length(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon))
table(is.na(dat$scientificName))
taxa <- read.table("Output/Taxa_FullList.csv",stringsAsFactors = F)
head(taxa)
taxa <- read.table("Output/Taxa_FullList.csv",stringsAsFactors = F,header=T)
head(taxa)
table(taxa$GBIFstatus)
dim(taxa)
length(unique(taxa$scientificName))
length(unique(taxa$taxonID))
length(unique(taxa$Taxon))
length(unique(taxa$scientificName))
uni_taxa <- unique(taxa[,c("Taxon","GBIFstatus")])
dim(uni_taxa)
ind <- duplicated(uni_taxa$Taxon)
ind
ind <- which(duplicated(uni_taxa$Taxon))
ind
uni_taxa[17,]
subset(uni_tax,Taxon=="Allolobophora parva")
subset(uni_taxa,Taxon=="Allolobophora parva")
uni_taxa <- unique(taxa[,c("Taxon_orig","GBIFstatus")])
dim(uni_taxa)
table(uni_taxa$GBIFstatus)
head(dat)
taxa$Taxon[taxa$GBIFstatus=="Missing"]
length(which(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon)%in%miss_taxa))
miss_taxa <- taxa$Taxon[taxa$GBIFstatus=="Missing"]
length(which(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon)%in%miss_taxa))
miss_taxa
length(which(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon_orig)%in%miss_taxa))
miss_taxa <- taxa$Taxon[taxa$GBIFstatus=="Missing"]
length(which(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon)%in%miss_taxa))
length(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon))
length(which(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon)%in%miss_taxa))/length(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon))
length(which(unique(subset(dat,grepl("GRIIS",dat$origDB))$Taxon)%in%miss_taxa))/length(unique(subset(dat,grepl("GRIIS",dat$origDB))$Taxon))
length(which(unique(subset(dat,grepl("GloNAF",dat$origDB))$Taxon)%in%miss_taxa))/length(unique(subset(dat,grepl("GloNAF",dat$origDB))$Taxon))
length(which(unique(subset(dat,grepl("AmphRep",dat$origDB))$Taxon)%in%miss_taxa))/length(unique(subset(dat,grepl("AmphRep",dat$origDB))$Taxon))
length(which(unique(subset(dat,grepl("GAVIA",dat$origDB))$Taxon)%in%miss_taxa))/length(unique(subset(dat,grepl("GAVIA",dat$origDB))$Taxon))
length(which(unique(subset(dat,grepl("GRIIS",dat$origDB))$Taxon)%in%miss_taxa))
length(which(unique(subset(dat,grepl("FirstRecords",dat$origDB))$Taxon)%in%miss_taxa))
length(which(unique(subset(dat,grepl("AmphRep",dat$origDB))$Taxon)%in%miss_taxa))
length(which(unique(subset(dat,grepl("AmphRep",dat$origDB))$Taxon)%in%miss_taxa))/length(unique(subset(dat,grepl("AmphRep",dat$origDB))$Taxon))
length(which(unique(subset(dat,grepl("GloNAF",dat$origDB))$Taxon)%in%miss_taxa))
length(which(unique(subset(dat,grepl("GloNAF",dat$origDB))$Taxon)%in%miss_taxa))/length(unique(subset(dat,grepl("GloNAF",dat$origDB))$Taxon))
length(which(unique(subset(dat,grepl("GAVIA",dat$origDB))$Taxon)%in%miss_taxa))
length(which(unique(subset(dat,grepl("GAVIA",dat$origDB))$Taxon)%in%miss_taxa))/length(unique(subset(dat,grepl("GAVIA",dat$origDB))$Taxon))
graphics.off()
rm(list=ls())
library(sf)
library(RColorBrewer)
library(shape) # for legend
setwd("/home/hanno/Bioinvasion/IndicatorAliens/Workflow") # set working directory
source("../../SpatialSpread/owncolleg.r") # adjusted color legend
regions <- st_read(dsn="../../IndicatorAliens/Shapefile",layer="GRIIS_2.1",stringsAsFactors = F)
alldat <- read.table(file.path("UnifAlien","Output","AlienSpecies_MultipleDBs_Masterfile_vs2.3.csv"),header=T,stringsAsFactors = F)
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
graphics.off()
rm(list=ls())
library(sf)
library(RColorBrewer)
library(shape) # for legend
setwd("/home/hanno/Bioinvasion/IndicatorAliens/Workflow") # set working directory
source("../../SpatialSpread/owncolleg.r") # adjusted color legend
regions <- st_read(dsn="../../IndicatorAliens/Shapefile",layer="GRIIS_2.1",stringsAsFactors = F)
alldat <- read.table(file.path("UnifAlien","Output","AlienSpecies_MultipleDBs_Masterfile_vs2.3.csv"),header=T,stringsAsFactors = F)
# alldat <- subset(alldat,IsInvasive=="Invasive")
# identify islands
islands_regions <- st_intersects(regions) # get islands from polygons (not comprehensive!)
islands_regions <- sort(regions$Region[which(unlist(lapply(islands_regions,length))==1)])
islandnames <- read.table("../../Data/Regions/IslandNames.csv",stringsAsFactors = F)[,1] # get additional islands from first record DB
islands <- sort(c(islands_regions,islandnames[!islandnames%in%islands_regions]))
islands <- islands[!islands%in%c("Aland Islands","Antarctica","Bonaire","Virgin Islands, US","British Virgin Islands",
"Cocos (Keeling) Islands","Corse","Greenland","Micronesia, Federated States of",
"Pitcairn Islands","Reunion","Saint Barthelemy","Saint Helena","Turks and Caicos",
"US Minor Outlying Islands","Ascension","Tristan da Cunha","Socotra Island","South Africa",
"Croatia","Tunisia","Togo","Singapore")]
# islands <- islands[!islands%in%regions$Region]
nspec_reg <- aggregate(alldat$Taxon,by=list(Region=alldat$Location),length)
nspec_reg
nspec_reg$x[nspec_reg$x>3000] <- 3000
spatial_nspec <- merge(regions,nspec_reg,by="Region",all.x=T)
spatial_nspec$col_norm <- round(spatial_nspec$x/max(spatial_nspec$x,na.rm=T)*99)+1
cols <- colorRampPalette((brewer.pal(n=9,name="YlOrRd")[1:9]))(max(spatial_nspec$col_norm,na.rm=T))
# cols <- rev(colorRampPalette(c("brown4","brown3","orange","yellow","darkolivegreen3","lightblue"))(max(data_regs$col_norm,na.rm=T)))
# cols <- colorRampPalette(c("yellow","yellow","yellow","orange","darkred"))(max(n_sp$Freq_norm)) #
# cols <- (colorRampPalette(cols)(max(n_sp$Freq_norm)))
spatial_nspec$col <- cols[spatial_nspec$col_norm]
spatial_nspec$col[is.na(spatial_nspec$col_norm)] <- grey(0.95)
spatial_nspec$norm_isl <- spatial_nspec$col_norm/15
spatial_nspec$norm_isl[spatial_nspec$norm_isl<1.2] <- 1.2
spatial_nspec <- spatial_nspec[order(spatial_nspec$x),]
# cbind(regions$Region,spatial_nspec$Region)
x11(width=8,height=3.3)
# png("../Figures/Worldmap_NumberTaxa.png",unit="in",width=8,height=3.3,res=300)
# png("../Figures/Worldmap_NumberTaxa_GRIISInvasive.png",unit="in",width=8,height=3.3,res=300)
layout(matrix(1:2,nc=2),widths=c(0.85,0.15))
op <- par(mar=c(0,0,0,0),las=1,cex=0.9,tck=-0.02,mgp=c(2,0.3,0))
plot(st_geometry(spatial_nspec),col=spatial_nspec$col,lwd=0.5)
isl_dat <- subset(spatial_nspec,Region%in%islands)
for (i in 1:nrow(isl_dat)){
points(isl_dat$Lon[i],isl_dat$Lat[i],pch=1,cex=isl_dat$norm_isl[i]+0.4,col="black",lwd=2)
points(isl_dat$Lon[i],isl_dat$Lat[i],pch=1,cex=isl_dat$norm_isl[i],col=isl_dat$col[i],lwd=3)
}
plot(1:10,axes=F,type="n")
owncolleg(posx=c(0.1,0.2),posy=c(0.1,0.95),col=cols,cex=1.2,digit=0,zlim=c(1,3000))#,">2000"
text(x=0.8,y=0.6,labels="Number of taxa",srt=270,cex=1.2)
# text(x=0.8,y=0.6,labels="Number of invasive species",srt=270,cex=1.2)
mtext(">",side=3,line=-1.27,adj=0.27)
par(op)
# dev.off()
nspec_reg <- aggregate(alldat$Taxon,by=list(Region=alldat$Location),length)
range(nspec_reg$x)
hist(nspec_reg$x)
nspec_reg
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
islands
nspec_reg
source('~/Bioinvasion/IndicatorAliens/Workflow/Plot_WorldMap.r')
graphics.off()
rm(list=ls())
library(openxlsx)
library(data.table)
setwd("/home/hanno/Bioinvasion/IndicatorAliens/Workflow") # set working directory
alldat <- read.table(file.path("UnifAlien","Output","AlienSpecies_MultipleDBs_Masterfile_vs2.3.csv"),header=T,stringsAsFactors = F)
taxonomic <- read.table("UnifAlien/Output/Taxa_FullList.csv",stringsAsFactors = F,header=T)
source('~/Bioinvasion/IndicatorAliens/Workflow/OverlapDBs.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/OverlapDBs.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/OverlapDBs.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/OverlapDBs.r')
source('~/Bioinvasion/IndicatorAliens/Workflow/OverlapDBs.r')
rm(list=ls())
setwd("/home/hanno/Bioinvasion/IndicatorAliens/Workflow") # set working directory
## identify input datasets based on file name "StandardSpec_....csv"
FileInfo <- read.xlsx(file.path("UnifAlien","Config","DatabaseInfo.xlsx"),sheet=1)
allfiles <- list.files("UnifAlien/Output")
FileInfo
## identify input datasets based on file name "StandardSpec_....csv"
FileInfo <- read.xlsx(file.path("UnifAlien","Config","DatabaseInfo.xlsx"),sheet=1)
allfiles <- list.files("UnifAlien/Output")
inputfiles_all <- allfiles[grep("Step4_StandardTaxonNames_",allfiles)]
inputfiles <- vector()
for (i in 1:length(inputfiles_all)){
inputfiles <- c(inputfiles,grep(FileInfo[i,"Dataset_brief_name"],inputfiles_all,value=T))
}
FileInfo[i,"Dataset_brief_name"]
allfiles <- list.files("UnifAlien/Output/Intermediate")
inputfiles_all <- allfiles[grep("Step4_StandardTaxonNames_",allfiles)]
inputfiles_all
inputfiles <- vector()
for (i in 1:length(inputfiles_all)){
inputfiles <- c(inputfiles,grep(FileInfo[i,"Dataset_brief_name"],inputfiles_all,value=T))
}
inputfiles
inputfiles <- inputfiles[!is.na(inputfiles)]
inputfiles <- inputfiles[c(2,5,1,3,4)]
inputfiles
mat_entries <- matrix(NA,nr=length(inputfiles),nc=length(inputfiles))
mat_species <- matrix(NA,nr=length(inputfiles),nc=length(inputfiles))
mat_regions <- matrix(NA,nr=length(inputfiles),nc=length(inputfiles))
all_names <- gsub("^.*_","",inputfiles)
all_names <- gsub("\\..*$","",all_names)
colnames(mat_entries) <- all_names
rownames(mat_entries) <- all_names
colnames(mat_species) <- all_names
rownames(mat_species) <- all_names
colnames(mat_regions) <- all_names
rownames(mat_regions) <- all_names
mat_regions
allfiles <- list.files("UnifAlien/Output/Intermediate")
inputfiles_all <- allfiles[grep("Step4_StandardTaxonNames_",allfiles)]
inputfiles <- vector()
for (i in 1:length(inputfiles_all)){
inputfiles <- c(inputfiles,grep(FileInfo[i,"Dataset_brief_name"],inputfiles_all,value=T))
}
inputfiles <- inputfiles[!is.na(inputfiles)]
inputfiles
inputfiles <- inputfiles[c(3,5,1,2,4)]
inputfiles
mat_entries <- matrix(NA,nr=length(inputfiles),nc=length(inputfiles))
mat_species <- matrix(NA,nr=length(inputfiles),nc=length(inputfiles))
mat_regions <- matrix(NA,nr=length(inputfiles),nc=length(inputfiles))
all_names <- gsub("^.*_","",inputfiles)
all_names <- gsub("\\..*$","",all_names)
colnames(mat_entries) <- all_names
rownames(mat_entries) <- all_names
colnames(mat_species) <- all_names
rownames(mat_species) <- all_names
colnames(mat_regions) <- all_names
rownames(mat_regions) <- all_names
mat_regions
i<-1
dat1 <- read.table(file.path("UnifAlien","Output","Intermediate",paste0(inputfiles[i])),header=T,stringsAsFactors = F)
uni_entries1 <- unique(paste(dat1$Location,dat1$Taxon))
uni_species1 <- unique(dat1$Taxon)
uni_regions1 <- unique(dat1$Location)
uni_regions1
j
j<-2
dat2 <- read.table(file.path("UnifAlien","Output","Intermediate",paste0(inputfiles[j])),header=T,stringsAsFactors = F)
uni_entries2 <- unique(paste(dat2$Location,dat2$Taxon))
uni_species2 <- unique(dat2$Taxon)
uni_regions2 <- unique(dat2$Location)
# if (j %in% c(3,4,5)) {
#   mat_entries[i,j] <- round(length(which(uni_entries1%in%uni_entries2))/length(unique(c(uni_entries1,uni_entries2))),2)*100
# } else {
#   mat_entries[i,j] <- round(length(which(uni_entries1%in%uni_entries2))/length(unique(c(uni_entries2))),2)*100
# }
mat_entries[i,j] <- round(length(which(uni_entries1%in%uni_entries2)))#/length(unique(c(uni_entries1,uni_entries2))),2)*100
round(length(which(uni_entries1%in%uni_entries2)))
round(length(which(uni_entries1%in%uni_entries2)))/length(unique(c(uni_entries1,uni_entries2))),2)*100
round(length(which(uni_entries1%in%uni_entries2))/length(unique(c(uni_entries1,uni_entries2))),2)*100
source('~/Bioinvasion/IndicatorAliens/Workflow/OverlapDBs.r')
source('~/.active-rstudio-document')
mat_species
inputfiles
source('~/.active-rstudio-document')
mat_entries
mat_regions
i<-1
dat1 <- read.table(file.path("UnifAlien","Output","Intermediate",paste0(inputfiles[i])),header=T,stringsAsFactors = F)
uni_entries1 <- unique(paste(dat1$Location,dat1$Taxon))
uni_species1 <- unique(dat1$Taxon)
uni_regions1 <- unique(dat1$Location)
uni_species1
inputfiles
j<-4
dat2 <- read.table(file.path("UnifAlien","Output","Intermediate",paste0(inputfiles[j])),header=T,stringsAsFactors = F)
uni_entries2 <- unique(paste(dat2$Location,dat2$Taxon))
uni_species2 <- unique(dat2$Taxon)
uni_regions2 <- unique(dat2$Location)
uni_species2
round(length(which(uni_species2%in%uni_species1))/length(unique(c(uni_species2))),2)*100
length(which(uni_species2%in%uni_species1))
length(unique(c(uni_species2)))
source('~/.active-rstudio-document')
mat_regions
mat_species
mat_entries
citation(package = "rgbif")
